import 'dart:io';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:path_provider/path_provider.dart';
import 'package:share_plus/share_plus.dart';
import '../../../domain/models/skin_analysis_report.dart';

class SkinAnalysisPDFService {
  static final DateTime currentDateTime = DateTime.parse('2025-03-05 05:17:05');
  static const String currentUser = 'surajgore-007';

  Future<File> generateAndSavePDF(List<SkinAnalysisReport> reports) async {
    final pdf = pw.Document();

    pdf.addPage(
      pw.MultiPage(
        pageFormat: PdfPageFormat.a4,
        margin: const pw.EdgeInsets.all(32),
        header: (context) => _buildHeader(context),
        footer: (context) => _buildFooter(context),
        build: (context) => [
          _buildTitle(),
          pw.SizedBox(height: 20),
          _buildSummaryInfo(reports),
          pw.SizedBox(height: 20),
          ...reports.expand((report) => [
                _buildReportSection(report),
                pw.SizedBox(height: 20),
                if (reports.last != report) pw.Divider(),
                if (reports.last != report) pw.SizedBox(height: 20),
              ]),
        ],
      ),
    );

    return await _savePDF(pdf);
  }

  pw.Widget _buildHeader(pw.Context context) {
    return pw.Container(
      decoration: pw.BoxDecoration(
        border: pw.Border(
          bottom: pw.BorderSide(width: 0.5, color: PdfColors.grey),
        ),
      ),
      margin: const pw.EdgeInsets.only(bottom: 20),
      padding: const pw.EdgeInsets.only(bottom: 8),
      child: pw.Row(
        mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
        children: [
          pw.Text(
            'Skin Analysis Report',
            style: pw.TextStyle(
              fontSize: 12,
              fontWeight: pw.FontWeight.bold,
            ),
          ),
          pw.Text(
            'Page ${context.pageNumber} of ${context.pagesCount}',
            style: const pw.TextStyle(fontSize: 12),
          ),
        ],
      ),
    );
  }

  pw.Widget _buildFooter(pw.Context context) {
    return pw.Container(
      decoration: pw.BoxDecoration(
        border: pw.Border(
          top: pw.BorderSide(width: 0.5, color: PdfColors.grey),
        ),
      ),
      margin: const pw.EdgeInsets.only(top: 20),
      padding: const pw.EdgeInsets.only(top: 8),
      child: pw.Row(
        mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
        children: [
          pw.Text(
            'Generated on: $currentDateTime',
            style: const pw.TextStyle(fontSize: 10),
          ),
          pw.Text(
            'Generated by: $currentUser',
            style: const pw.TextStyle(fontSize: 10),
          ),
        ],
      ),
    );
  }

  pw.Widget _buildTitle() {
    return pw.Header(
      level: 0,
      child: pw.Text(
        'Skin Analysis Report',
        style: pw.TextStyle(
          fontSize: 24,
          fontWeight: pw.FontWeight.bold,
          color: PdfColors.blue800,
        ),
      ),
    );
  }

  pw.Widget _buildSummaryInfo(List<SkinAnalysisReport> reports) {
    return pw.Container(
      padding: const pw.EdgeInsets.all(10),
      decoration: pw.BoxDecoration(
        color: PdfColors.grey100,
        borderRadius: const pw.BorderRadius.all(pw.Radius.circular(8)),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Text(
            'Summary Information',
            style: pw.TextStyle(
              fontSize: 16,
              fontWeight: pw.FontWeight.bold,
            ),
          ),
          pw.SizedBox(height: 8),
          pw.Text('Total Reports: ${reports.length}'),
          pw.Text('Patient ID: $currentUser'),
          pw.Text('Report Date: $currentDateTime'),
        ],
      ),
    );
  }

  pw.Widget _buildReportSection(SkinAnalysisReport report) {
    return pw.Container(
      padding: const pw.EdgeInsets.all(10),
      decoration: pw.BoxDecoration(
        border: pw.Border.all(color: PdfColors.grey300),
        borderRadius: const pw.BorderRadius.all(pw.Radius.circular(8)),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          _buildPatientInfo(report),
          pw.SizedBox(height: 10),
          _buildDiagnosis(report),
          pw.SizedBox(height: 10),
          _buildAdditionalFindings(report),
          if (report.imagePath.isNotEmpty) ...[
            pw.SizedBox(height: 10),
            _buildImage(report.imagePath),
          ],
        ],
      ),
    );
  }

  pw.Widget _buildPatientInfo(SkinAnalysisReport report) {
    return pw.Container(
      padding: const pw.EdgeInsets.all(10),
      decoration: pw.BoxDecoration(
        color: PdfColors.grey100,
        borderRadius: const pw.BorderRadius.all(pw.Radius.circular(8)),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Text(
            'Patient Information',
            style: pw.TextStyle(
              fontSize: 16,
              fontWeight: pw.FontWeight.bold,
            ),
          ),
          pw.SizedBox(height: 8),
          pw.Text('Patient ID: ${report.userId}'),
          pw.Text('Analysis Date: ${report.timestamp}'),
        ],
      ),
    );
  }

  pw.Widget _buildDiagnosis(SkinAnalysisReport report) {
    return pw.Container(
      padding: const pw.EdgeInsets.all(10),
      decoration: pw.BoxDecoration(
        border: pw.Border.all(color: PdfColors.grey300),
        borderRadius: const pw.BorderRadius.all(pw.Radius.circular(8)),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Text(
            'Primary Diagnosis',
            style: pw.TextStyle(
              fontSize: 16,
              fontWeight: pw.FontWeight.bold,
            ),
          ),
          pw.SizedBox(height: 8),
          pw.Text('Condition: ${report.primaryDiagnosis}'),
          pw.Text(
              'Confidence: ${(report.confidence * 100).toStringAsFixed(1)}%'),
          pw.Text('Confidence Level: ${report.confidenceLevel}'),
        ],
      ),
    );
  }

  pw.Widget _buildAdditionalFindings(SkinAnalysisReport report) {
    return pw.Container(
      padding: const pw.EdgeInsets.all(10),
      decoration: pw.BoxDecoration(
        border: pw.Border.all(color: PdfColors.grey300),
        borderRadius: const pw.BorderRadius.all(pw.Radius.circular(8)),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Text(
            'Additional Findings',
            style: pw.TextStyle(
              fontSize: 16,
              fontWeight: pw.FontWeight.bold,
            ),
          ),
          pw.SizedBox(height: 8),
          ...report.predictions.skip(1).map((prediction) => pw.Text(
                '${prediction['class']}: ${((prediction['probability'] as num) * 100).toStringAsFixed(1)}%',
              )),
        ],
      ),
    );
  }

  pw.Widget _buildImage(String imagePath) {
    try {
      final image = pw.MemoryImage(
        File(imagePath).readAsBytesSync(),
      );
      return pw.Container(
        height: 200,
        child: pw.Center(
          child: pw.Image(image, fit: pw.BoxFit.contain),
        ),
      );
    } catch (e) {
      return pw.Container(
        height: 200,
        child: pw.Center(
          child: pw.Text('Image not available'),
        ),
      );
    }
  }

  Future<File> _savePDF(pw.Document pdf) async {
    final output = await getTemporaryDirectory();
    final timestamp = DateTime.now().millisecondsSinceEpoch;
    final file = File('${output.path}/skin_analysis_$timestamp.pdf');
    await file.writeAsBytes(await pdf.save());
    return file;
  }

  Future<void> sharePDF(File file) async {
    try {
      await Share.shareFiles(
        [file.path],
        text: 'Skin Analysis Report',
      );
    } catch (e) {
      print('Error sharing PDF: $e');
      rethrow;
    }
  }
}
